{
  "name": "Querybuilder",
  "tagline": "A simple query builder for relational databases",
  "body": "[![Build Status](https://travis-ci.org/olajoscs/QueryBuilder.svg?branch=master)](https://travis-ci.org/olajoscs/QueryBuilder)\r\n[![Latest Stable Version](https://poser.pugx.org/olajoscs/querybuilder/v/stable)](https://packagist.org/packages/olajoscs/querybuilder)\r\n# QueryBuilder\r\nA simple query builder for relational databases, currently with MySQL and PostgreSQL support. 100% of the code is unit tested.\r\n\r\nContains the 4 basic (CRUD) operations with transaction handling.\r\n\r\nMinimum requirements: PHP 5.5+ with MySQL or PostgreSQL.\r\n\r\n# Creating the connection\r\nThe Connection class extends the built-in PDO class. It is the starting point of creating statements.\r\nCreate a new instance based on the database type you are using, and give it to your DI container trait it as a singleton.\r\nThe constructor is the same as the one in the PDO class.\r\n\r\n```php\r\n  $myDIContainer->singleton('connection', function() {\r\n    return new OlajosCs\\QueryBuilder\\MySQL\\Connection($type, $host, $username, $password, $database, $options)\r\n  });\r\n```\r\n\r\n# Starting from Connection\r\nThere are 4 statements (Select, Update, Insert, Delete), which have own methods to create.\r\nAll the statements has an execute method, which executes the built query, then returns the PDOStatement object.\r\n\r\n## Transaction\r\nTransaction can be used with a callback function. In case of any exception all changes are rollbacked.\r\n```php\r\n  $connection->transaction(function() use ($connection) {\r\n    $connection->get(...);\r\n  });\r\n```\r\n\r\n## Basic select syntax\r\nThe syntax of building a select statmenet is similar to do it in SQL.\r\n```php\r\n  $connection\r\n    ->select(['field', 'list'])\r\n    ->from('table_name')\r\n    ->where('field', '=', $value)\r\n    ->groupBy('field')\r\n    ->orderBy('field')\r\n    ->get();\r\n```\r\n\r\n### List of get.... methods\r\n- get(): Returns an array of stdClasses.\r\n\r\n- getAsClasses(string $className, array $constructorParameter): Returns an array of explicit object.\r\n\r\n- getOne(): Returns only one stdClass. If multiple rows would be returned, or there are no rows to return, it throws exception.\r\n\r\n- getOneClass(string $className, array $constructorParameter): Returns only one explicit object. If multiple rows would be returned, or there are no rows to return, it throws exception.\r\n\r\n- getOneField(string $fieldName): Returns only one field of the row. If the field is not found, exception is thrown.\r\n\r\n- getList(string $fieldName): Returns a list of the specified field from the rows. IF the field is not found, exception is thrown.\r\n\r\n- getWithKey(string $keyField): Returns the an array of stdClasses. The key of the elements are the current value of the $keyField variable.\r\n\r\n- getClassesWithKey(string $className, array $constructorParameters, string $keyField): Returns an array of explicit objects. The key of the elements are the current value of the $keyField variable.\r\n\r\n## Basic update syntax\r\nUpdate syntax is similar as seen in SQL.\r\n\r\nThe query is executed only when the execute() method is called.\r\n```php\r\n  $connection\r\n    ->update('table_name')\r\n    ->set(\r\n      [\r\n        'value1' => 1,\r\n        'value2' => 2\r\n      ]\r\n    )\r\n    ->where('id', '=', 1)\r\n    ->execute();\r\n```\r\n\r\n## Basic insert syntax\r\nInsert syntax is similar as seen in SQL.\r\n\r\nThe query is executed only when the execute() method is called.\r\n```php\r\n  $connection\r\n    ->insert(\r\n      [\r\n        'field1' => 1,\r\n        'field2' => 2\r\n      ]\r\n    )\r\n    ->into('table_name')\r\n    ->execute();  \r\n  // OR\r\n  $connection\r\n    ->insert()  \r\n    ->into('table_name')\r\n    ->values(  \r\n      [\r\n        'field1' => 1,\r\n        'field2' => 2\r\n      ]\r\n    )\r\n    ->execute();  \r\n```\r\n\r\n## Basic delete syntax\r\nDelete syntax is similar as seen in SQL.\r\n\r\nThe query is executed only when the execute() method is called.\r\n```php\r\n  $connection\r\n    ->delete()\r\n    ->from('table_name')\r\n    ->where('id', '=', 1)\r\n    ->execute();\r\n```\r\n\r\n## Raw expressions\r\nRawExpression object can be used when any expression is needed, but the querybuilder is not able to handle it.\r\nThis can be used in select and where methods.\r\n\r\n```php\r\n  // for MySQL\r\n  $connection\r\n    ->select(new \\OlajosCs\\QueryBuilder\\MySQL\\RawExpression('count(1) as counter'))\r\n    ->from('tests')\r\n    ->getOneField('counter');\r\n\r\n  $connection\r\n    ->select() // empty means *\r\n    ->from('tests')\r\n    ->where(new \\OlajosCs\\QueryBuilder\\MySQL\\RawExpression('select count....... = 1')\r\n    ->get();\r\n```\r\n\r\n## Where clauses\r\nIn Select, Update and Delete statements where clauses can be used.\r\nAll these statements have the following methods regarding where either with \"and\" connector (normal methods) or \"or\" connector, with a where...Or method.\r\n\r\n### Where... methods\r\n- where(string $field, string $operator, mixed $value): Basic where, field {<>!=} value.\r\n- whereIn(string $field, array $values): Where field in (value1, value2).\r\n- whereNotIn(string $field, array $values): Where field not in (value1, value2).\r\n- whereBetween(string $field, mixed $min, mixed $max): Where field between min and max.\r\n- whereNull(string $field): Where field is null.\r\n- whereNotNull(string $field): Where field is not null.\r\n- whereRaw(RawExpression('where ...')): Where clause is placed directly into the query.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}